def awsECRURL="<AWS ECR URL>"
def awsKey="<Jenkins 내 AWS Credential명>"
def awsRegion="<ECR 적용 리전>"
def branch="<Github repository branch명>"
def commitMsg="<배포용 Helm Chart Commit 메시지>"
def directoryPath="<Jenkinsfile이 있는 Path>"
def githubEmail="<Github 계정 이메일 주소>"
def githubKey="<Jenkins 내 설정된 Github Credential명>"
def githubSSHURL="<Github Repository의 SSH URL 주소>"
def imageTag="<Bubble App Color>"

podTemplate(yaml: '''
              apiVersion: v1
              kind: Pod
              spec:
                volumes:
                - name: docker-socket
                  emptyDir: {}
                containers:
                - name: docker
                  image: docker:23.0.5-git
                  readinessProbe:
                    exec:
                      command: [sh, -c, "ls -S /var/run/docker.sock"]
                  command:
                  - sleep
                  args:
                  - 99d
                  volumeMounts:
                  - name: docker-socket
                    mountPath: /var/run
                - name: docker-daemon
                  image: docker:23.0.5-dind
                  securityContext:
                    privileged: true
                  volumeMounts:
                  - name: docker-socket
                    mountPath: /var/run
''')
{
    node(POD_LABEL) {

        stage('Checkout') {

            container('docker'){
                checkout scm
            }

        }

        stage('Docker Build') {

            dir(path: "${directoryPath}/container"){
                container('docker') {
                    sh "docker buildx build --platform=linux/amd64 --build-arg COLOR=${imageTag} -t ${awsECRURL}:${imageTag} ./"
                }
            }

        }

        stage('ECR Push') {

            container('docker') {
                docker.withRegistry("https://${awsECRURL}", "ecr:${awsRegion}:${awsKey}") {
                    sh "docker push ${awsECRURL}:${imageTag}"
                }
            }

        }

        stage('Deploy'){
            container('docker'){

                git branch: "${branch}",
                    credentialsId: "${githubKey}",
                    url: "${githubSSHURL}"

                withCredentials([sshUserPrivateKey(credentialsId: "${githubKey}", keyFileVariable: 'CERT')]) {

                    sh ("""
                        mkdir -p ~/.ssh && chmod 700 ~/.ssh &&  cp -prf ${CERT} ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa
                        git config --global --add safe.directory '/home/jenkins/agent/workspace/mini-project'
                        git config --global user.email ${githubEmail}
                        eval `ssh-agent -s` && ssh-add ~/.ssh/id_rsa
                        ssh-keyscan -H github.com >> ~/.ssh/known_hosts
                        sed -i 's/tag:.*/tag: ${imageTag}/g' ${directoryPath}/helm-charts/values.yaml
                        git add ${directoryPath}/helm-charts/values.yaml
                        git commit -m ${commitMsg}
                        git push -u origin ${branch}
                    """)
                }
            }
        }
    }
}