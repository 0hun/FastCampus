def awsECRURL="347880001135.dkr.ecr.ap-northeast-2.amazonaws.com/test"
def awsKey="aws-key"
def awsRegion="ap-northeast-2"
def branch="master"
def commitMsg="mini-project"
def directoryPath="Part4_Kubernetes/Chapter11/mini-project/service"
def githubEmail="skwjdgh1@gmail.com"
def githubKey="github-key"
def githubSSHURL="git@github.com:Najeongho/FastCampus.git"
def imageTag="green"

podTemplate(label: 'docker-build',
  containers: [
    containerTemplate(
      name: 'docker-client',
      image: 'docker:latest',
      command: 'sleep',
      args: '99d',
      ttyEnabled: true
    ),
    containerTemplate(
      name: 'docker-daemon',
      image: 'docker:19.03.1-dind',
      command: 'sleep',
      args: '99d',
      ttyEnabled: true
    ),
    containerTemplate(
      name: 'argo',
      image: 'argoproj/argo-cd-ci-builder:latest',
      command: 'cat',
      ttyEnabled: true
    ),
  ],
  volumes: [
    hostPathVolume(mountPath: '/var/lib/docker', hostPath: '/tmp'),
  ]
) {
  node('docker-build') {

    stages {

		stage('Checkout') {
		    steps {
                container('docker-client'){
                    checkout scm
                }
		    }

		}

		stage('Docker Build') {
            steps {
                dir(path: "${directoryPath}/container"){
                    container('docker-client') {
                        image = docker.build("${awsECRURL}:${imageTag}","--build-arg COLOR=${imageTag} .")
                        //sh 'docker build -t "${awsECRURL}:${imageTag}" --build-arg "COLOR=${imageTag}" .'
                    }
                }
            }
		}

		stage('ECR Push') {
		    steps {
                container('docker-client') {
                    docker.withRegistry("https://${awsECRURL}", "ecr:${awsRegion}:${awsKey}") {
                        image.push()
                    //    sh 'docker push "${awsECRURL}:${imageTag}"'
                    }
                }
		    }
		}

        stage('Deploy'){
            container('argo'){
                checkout(
                    [
                        $class: 'GitSCM',
                        extensions: scm.extensions,
                        branches: [
                            [
                                name: "*/${branch}"
                            ]
                        ],
                        userRemoteConfigs: [
                            [
                                url: "${githubSSHURL}",
                                credentialsId: "${githubKey}",
                            ]
                        ]
                    ]
                )
                sshagent(credentials: ["${githubKey}"]){
                    sh("""
                        #!/usr/bin/env bash
                        set +x
                        export GIT_SSH_COMMAND="ssh -oStrictHostKeyChecking=no"
                        git config --global user.email ${githubEmail}
                        git checkout ${branch}
                        cd ${directoryPath}/helm-charts
                        sed -i 's/tag:.*/tag: ${imageTag}/g' values.yaml
                        cd ../../../../
                        git commit -a -m ${commitMsg}
                        git remote set-url origin ${githubSSHURL}
                        git push -u origin master
                    """)
                }
            }
        }
	}
}